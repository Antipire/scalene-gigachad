import signal
import sys

class ScaleneSignals:

    def __init__(self) -> None:
        self.start_profiling_signal = signal.SIGILL
        if sys.platform != "win32":
            self.stop_profiling_signal = signal.SIGWINCH
            self.cpu_signal = signal.SIGVTALRM
            self.cpu_timer_signal = signal.ITIMER_REAL
            self.memcpy_signal = signal.SIGPROF
            # Malloc and free signals are generated by include/sampleheap.hpp.
            self.malloc_signal = signal.SIGXCPU
            self.free_signal = signal.SIGXFSZ
        else:
            self.cpu_signal = signal.SIGBREAK
            self.cpu_timer_signal = None
            self.stop_profiling_signal = signal.SIGTERM
            # TO DO - not yet activated for Windows
            self.mempcy_signal = None
            self.malloc_signal = None
            self.free_signal = None

    def set_timer_signals(self, use_virtual_time: bool) -> None:
        """Set up timer signals for CPU profiling."""
        if sys.platform == "win32":
            return
        if use_virtual_time:
            self.cpu_timer_signal = signal.ITIMER_VIRTUAL
        else:
            self.cpu_timer_signal = signal.ITIMER_REAL

        # Now set the appropriate timer signal.
        if self.cpu_timer_signal == signal.ITIMER_REAL:
            self.cpu_signal = signal.SIGALRM
        elif self.cpu_timer_signal == signal.ITIMER_VIRTUAL:
            self.cpu_signal = signal.SIGVTALRM
        elif self.cpu_timer_signal == signal.ITIMER_PROF:
            self.cpu_signal = signal.SIGPROF
            # NOT SUPPORTED
            assert False, "ITIMER_PROF is not currently supported."
    
